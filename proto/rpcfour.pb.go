// Code generated by protoc-gen-gogo.
// source: rpcfour.proto
// DO NOT EDIT!

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		rpcfour.proto

	It has these top-level messages:
		Header
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Header_MessageType int32

const (
	Header_REQUEST  Header_MessageType = 1
	Header_RESPONSE Header_MessageType = 2
	Header_ERROR    Header_MessageType = 3
	Header_CANCEL   Header_MessageType = 4
)

var Header_MessageType_name = map[int32]string{
	1: "REQUEST",
	2: "RESPONSE",
	3: "ERROR",
	4: "CANCEL",
}
var Header_MessageType_value = map[string]int32{
	"REQUEST":  1,
	"RESPONSE": 2,
	"ERROR":    3,
	"CANCEL":   4,
}

func (x Header_MessageType) Enum() *Header_MessageType {
	p := new(Header_MessageType)
	*p = x
	return p
}
func (x Header_MessageType) String() string {
	return proto1.EnumName(Header_MessageType_name, int32(x))
}
func (x *Header_MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(Header_MessageType_value, data, "Header_MessageType")
	if err != nil {
		return err
	}
	*x = Header_MessageType(value)
	return nil
}
func (Header_MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptorRpcfour, []int{0, 0} }

type Header struct {
	Sequence         *uint64             `protobuf:"varint,1,opt,name=sequence" json:"sequence,omitempty"`
	MessageType      *Header_MessageType `protobuf:"varint,2,opt,name=message_type,enum=proto.Header_MessageType" json:"message_type,omitempty"`
	PayloadPresent   *bool               `protobuf:"varint,3,opt,name=payload_present" json:"payload_present,omitempty"`
	Method           *string             `protobuf:"bytes,4,opt,name=method" json:"method,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto1.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptorRpcfour, []int{0} }

func (m *Header) GetSequence() uint64 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return 0
}

func (m *Header) GetMessageType() Header_MessageType {
	if m != nil && m.MessageType != nil {
		return *m.MessageType
	}
	return Header_REQUEST
}

func (m *Header) GetPayloadPresent() bool {
	if m != nil && m.PayloadPresent != nil {
		return *m.PayloadPresent
	}
	return false
}

func (m *Header) GetMethod() string {
	if m != nil && m.Method != nil {
		return *m.Method
	}
	return ""
}

func init() {
	proto1.RegisterType((*Header)(nil), "proto.Header")
	proto1.RegisterEnum("proto.Header_MessageType", Header_MessageType_name, Header_MessageType_value)
}
func (m *Header) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Header) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sequence != nil {
		data[i] = 0x8
		i++
		i = encodeVarintRpcfour(data, i, uint64(*m.Sequence))
	}
	if m.MessageType != nil {
		data[i] = 0x10
		i++
		i = encodeVarintRpcfour(data, i, uint64(*m.MessageType))
	}
	if m.PayloadPresent != nil {
		data[i] = 0x18
		i++
		if *m.PayloadPresent {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Method != nil {
		data[i] = 0x22
		i++
		i = encodeVarintRpcfour(data, i, uint64(len(*m.Method)))
		i += copy(data[i:], *m.Method)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Rpcfour(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Rpcfour(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRpcfour(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Header) Size() (n int) {
	var l int
	_ = l
	if m.Sequence != nil {
		n += 1 + sovRpcfour(uint64(*m.Sequence))
	}
	if m.MessageType != nil {
		n += 1 + sovRpcfour(uint64(*m.MessageType))
	}
	if m.PayloadPresent != nil {
		n += 2
	}
	if m.Method != nil {
		l = len(*m.Method)
		n += 1 + l + sovRpcfour(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRpcfour(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRpcfour(x uint64) (n int) {
	return sovRpcfour(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Header) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcfour
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcfour
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sequence = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			var v Header_MessageType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcfour
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (Header_MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MessageType = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadPresent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcfour
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.PayloadPresent = &b
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcfour
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpcfour
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Method = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcfour(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcfour
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpcfour(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpcfour
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpcfour
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpcfour
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRpcfour
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRpcfour
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRpcfour(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRpcfour = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpcfour   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("rpcfour.proto", fileDescriptorRpcfour) }

var fileDescriptorRpcfour = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x2a, 0x48, 0x4e,
	0xcb, 0x2f, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x5b, 0x19,
	0xb9, 0xd8, 0x3c, 0x52, 0x13, 0x53, 0x52, 0x8b, 0x84, 0x04, 0xb8, 0x38, 0x8a, 0x53, 0x0b, 0x4b,
	0x53, 0xf3, 0x92, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x58, 0x84, 0xf4, 0xb9, 0x78, 0x72, 0x53,
	0x8b, 0x8b, 0x13, 0xd3, 0x53, 0xe3, 0x4b, 0x2a, 0x0b, 0x52, 0x25, 0x98, 0x14, 0x18, 0x35, 0xf8,
	0x8c, 0x24, 0x21, 0x26, 0xe8, 0x41, 0xb4, 0xe9, 0xf9, 0x42, 0x54, 0x84, 0x54, 0x16, 0xa4, 0x0a,
	0x89, 0x73, 0xf1, 0x17, 0x24, 0x56, 0xe6, 0xe4, 0x27, 0xa6, 0xc4, 0x17, 0x14, 0xa5, 0x16, 0xa7,
	0xe6, 0x95, 0x48, 0x30, 0x2b, 0x30, 0x6a, 0x70, 0x08, 0xf1, 0x71, 0xb1, 0xe5, 0xa6, 0x96, 0x64,
	0xe4, 0xa7, 0x48, 0xb0, 0x28, 0x30, 0x6a, 0x70, 0x2a, 0xd9, 0x73, 0x71, 0x23, 0xeb, 0xe3, 0xe6,
	0x62, 0x0f, 0x72, 0x0d, 0x0c, 0x75, 0x0d, 0x0e, 0x11, 0x60, 0x14, 0xe2, 0xe1, 0xe2, 0x08, 0x72,
	0x0d, 0x0e, 0xf0, 0xf7, 0x0b, 0x76, 0x15, 0x60, 0x12, 0xe2, 0xe4, 0x62, 0x75, 0x0d, 0x0a, 0xf2,
	0x0f, 0x12, 0x60, 0x16, 0xe2, 0xe2, 0x62, 0x73, 0x76, 0xf4, 0x73, 0x76, 0xf5, 0x11, 0x60, 0x71,
	0x12, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x67, 0x3c,
	0x96, 0x63, 0x00, 0x04, 0x00, 0x00, 0xff, 0xff, 0xde, 0x76, 0xb9, 0xb7, 0xe0, 0x00, 0x00, 0x00,
}
